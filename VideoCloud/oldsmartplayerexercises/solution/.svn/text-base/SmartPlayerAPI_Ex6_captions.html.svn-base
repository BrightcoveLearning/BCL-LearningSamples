<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
	<head>
		<title>Player API Exercise 9</title>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<style type="text/css">
			body {font-family : Helvetica,Arial,sans-serif; color : #619FA8;}
			legend {
				color: #CF0050;
			}
		</style>

	</head>
	<body>
		<h1>Smart Player API Training</h1>
		<p>The buttons below are for development purposes only, to switch between Flash and  HTML5 players. Do not use these in production, as the method is unsupported. You should let the Smart Player decide whether to load Flash or HTML5 instead.</p>
		<div id="modeSwitch">
			<button onclick="BCL.switchToHTML5()" style="margin-bottom: 20px;margin-right: 10px;">Switch to HTML5 Player</button>
			<button onclick="BCL.switchToFlash()" style="margin-bottom: 20px;">Switch to Flash Player</button>
		</div>
		<!-- Start of Brightcove Player -->

		<div style="display:none">
		
		</div>
		
		<!--
		By use of this code snippet, I agree to the Brightcove Publisher T and C 
		found at https://accounts.brightcove.com/en/terms-and-conditions/. 
		-->
		
		<script language="JavaScript" type="text/javascript" src="http://admin.brightcove.com/js/BrightcoveExperiences.js"></script>
		
		<object id="myExperience" class="BrightcoveExperience">
		  <param name="bgcolor" value="#FFFFFF" />
		  <param name="width" value="960" />
		  <param name="height" value="445" />
		  <param name="playerID" value="1297961559001" />
		  <param name="playerKey" value="AQ~~,AAAA1oy1bvE~,ALl2ezBj3WFsovIlTcw9sgIqmfwccHMf" />
		  <param name="isVid" value="true" />
		  <param name="isUI" value="true" />
		  <param name="dynamicStreaming" value="true" />
		  <!-- params for Smart Player API -->
		  <param name="includeAPI" value="true" />
		  <param name="templateReadyHandler" value="BCL.onTemplateReady" />
		</object>
		
		<script type="text/javascript">brightcove.createExperiences();</script>
		
		<!-- End of Brightcove Player -->
		<div>
			Select language for subtitles: <select id="languageSelector" onchange="BCL.showSubTitles(this.options[this.selectedIndex].value)">
				<option value="">None</option>
				<option value="de">Deutsch</option>
				<option value="es">español</option>
				<option value="fr">français</option>
				<option value="ja">日本語</option>
			</select>
		</div>
<script type="text/javascript">
	// namespace for everything global
	var BCL = {};
	// listener for the Template Ready event
	BCL.onTemplateReady = function(event) {
		console.log("EVENT: TEMPLATE_READY");
		BCL.player = brightcove.api.getExperience("myExperience");
		// get a reference to the video player module
	  BCL.videoPlayer = BCL.player.getModule(brightcove.api.modules.APIModules.VIDEO_PLAYER);
	  // set listener for media change event
	  BCL.videoPlayer.addEventListener(brightcove.api.events.MediaEvent.CHANGE, BCL.onMediaChange);
		// get a reference to the captions module
		BCL.captionsModule = BCL.player.getModule(brightcove.api.modules.APIModules.CAPTIONS);
		// add success/error listeners for captions load
		BCL.captionsModule.addEventListener(brightcove.api.events.CaptionsEvent.DFXP_LOAD_SUCCESS, BCL.onDFXPLoadSuccess);
		BCL.captionsModule.addEventListener(brightcove.api.events.CaptionsEvent.DFXP_LOAD_ERROR, BCL.onDFXPLoadError);
	}
	// captions load success handler
	BCL.onDFXPLoadSuccess = function(event) {
		console.log("DFXP Load Success");
		console.log(event);
		// need to set the language based on selected language
		BCL.captionsModule.setLanguage(BCL.language);
	}
	// captions load error handler
	BCL.onDFXPLoadError = function(event) {
		console.log("DFXP Load Error");
		console.log(event);
	}
	// set up captions
	BCL.showSubTitles = function(language) {
		console.log("In BCL.showSubTitles "+ language);
		// only do this if a subtitles language has been selected
		if (language != "") {
			// set a flag to remember that subtitles are on
			BCL.subTitlesOn = true;
			// keep track of the language
			BCL.language = language;
			// get the filename stub for the captions from the video custom field and construct the path
			BCL.videoPlayer.getCurrentVideo( function(videoDTO) {
				 /**
				 this is a training workaround to allow viewing captions in either the Flash or HTML5
				 player on a local web server - for HTML5, the captions files must be on the same
				 domain as the page; for Flash, getting captions files from the local domain 
				 requires some complicated configuration of the local web server; so here we're
				 using a local path for HTML5 and the server URL for Flash 
				 **/
				if (document.location.href.indexOf("forceHTML=true", 0) > 0) {
					// in html mode, use local dfxp file
					var pathPrefix = "../captions/";
				}
				else {
					// in flash mode, use remote dfxp file
					var pathPrefix = "http://files.brightcove.com/";
				}
				// construct the captions path
				var captionsPath = pathPrefix + videoDTO.customFields.dfxppath + language.toUpperCase() + ".xml";
				console.log(captionsPath);
				var videoID = videoDTO.id;
				console.log(videoID);
				// load the captions file
				BCL.captionsModule.loadDFXP(captionsPath,videoID);
			});
		}
		else {
			// if no language was selected, set flag to know that captions are off
			BCL.subTitlesOn = false;
			BCL.language = null;
			// turn captions off
			BCL.captionsModule.setLanguage(BCL.language);
		}
	}
	BCL.onMediaChange = function(event) {
		console.log("EVENT: media change");
		// load captions if subtitles are on
		if (BCL.subTitlesOn) {
			BCL.showSubTitles(BCL.language);
		}
	}
	// for development purposes only: reopen page with HTML5 player
	BCL.switchToHTML5 = function() {
		var separator = "?";
		if (document.location.href.indexOf("?", 0) > -1) {
			separator = "&";
		}
		window.location = document.location.href + separator + "forceHTML=true";
	};
	// for development purposes only: switch back to Flash
	BCL.switchToFlash = function() {
		var startOfQuery = document.location.href.indexOf("forceHTML", 0) -1;
		window.location = document.location.href.substring(0, startOfQuery);
	};
	
</script>

	</body>
</html>
