package {	import com.brightcove.api.APIModules;    import com.brightcove.api.CustomModule;    import com.brightcove.api.events.AdEvent;    import com.brightcove.api.events.MediaEvent;    import com.brightcove.api.events.MenuEvent;    import com.brightcove.api.modules.AdvertisingModule;    import com.brightcove.api.modules.CaptionsModule;    import com.brightcove.api.modules.ExperienceModule;    import com.brightcove.api.modules.MenuModule;    import com.brightcove.api.modules.VideoPlayerModule;        import flash.display.DisplayObject;    import flash.display.Graphics;    import flash.display.Loader;    import flash.display.LoaderInfo;    import flash.display.Sprite;    import flash.display.Stage;    import flash.events.Event;    import flash.events.IOErrorEvent;    import flash.events.MouseEvent;    import flash.events.TimerEvent;    import flash.external.ExternalInterface;    import flash.net.URLRequest;    import flash.system.Security;    import flash.text.TextField;    import flash.text.TextFieldAutoSize;    import flash.text.TextFormat;    import flash.utils.Timer;		public class autoPlayMute extends CustomModule	{		private var _experienceModule:ExperienceModule;		private var _videoPlayerModule:VideoPlayerModule;		private var _menuModule:MenuModule;		private var _overlay:Sprite;		private var myMute;				public function autoPlayMute()		{			trace("@project autoPlayMute");			trace("@author James Barlow");			trace("@lastModified 02.21.13 1236 EST");			trace("@version 1.1.1");			myMute = new unmuteme();			//addChild(myMute);					}				override protected function initialize():void		{			_experienceModule = player.getModule(APIModules.EXPERIENCE) as ExperienceModule;			_videoPlayerModule = player.getModule(APIModules.VIDEO_PLAYER) as VideoPlayerModule;			 _menuModule = player.getModule(APIModules.MENU) as MenuModule;						_videoPlayerModule.mute();			_overlay = _videoPlayerModule.overlay();			_overlay.addChild(myMute);			myMute.alpha = 0;			myMute.addEventListener(MouseEvent.CLICK, muteClicked);			myMute.buttonMode = true;			myMute.mouseChildren = false;			log("overlay added");						// Listen for events that should trigger resizing            _videoPlayerModule.addEventListener(Event.FULLSCREEN, onResizeEvent);            _videoPlayerModule.addEventListener(Event.RESIZE, onResizeEvent);            _experienceModule.getStage().addEventListener(Event.RESIZE, onResizeEvent);            _experienceModule.getStage().addEventListener(Event.FULLSCREEN, onResizeEvent);			_menuModule.addEventListener(MenuEvent.OVERLAY_MENU_OPEN, onMenuEvent);             // work around initial video element creation when you push play (or auto play is triggered)            // since initial dimensions are 320x240 regardless of content.           _videoPlayerModule.addEventListener(MediaEvent.PROGRESS, onProgressEvent);						 		}				private function onMenuEvent(event:Event):void {            log("Resizing creative due to " + event.type + " event");            var timer:Timer = new Timer(200, 1);            timer.addEventListener(TimerEvent.TIMER, sizeAndPositionCurrentCreative);            timer.start();        }				protected function muteClicked(e:MouseEvent):void		{			_videoPlayerModule.mute(false);			_videoPlayerModule.pause(false);			_videoPlayerModule.setVolume(.7);			_overlay.removeChildAt(0);					}				private function sizeAndPositionCurrentCreative(event:Event = null):void {			log("size event called");            Stage(_experienceModule.getStage()).removeEventListener(Event.ENTER_FRAME, sizeAndPositionCurrentCreative);                                          var widthMargin:Number = _videoPlayerModule.getCurrentVideoWidth() / 2;                var heightMargin:Number =  _videoPlayerModule.getCurrentVideoHeight() / 2;                               myMute.x =  widthMargin - (myMute.width/2);                myMute.y =  heightMargin  - (myMute.height/2);            	myMute.alpha = 1;				        }				 /**        * Some events fire before they actually complete.  This captures them and defers the resizing until the next frame.        */        private function onResizeEvent(event:Event):void {            log("Resizing creative due to " + event.type + " event");                      Stage(_experienceModule.getStage()).addEventListener(Event.ENTER_FRAME, sizeAndPositionCurrentCreative);        }        				 /**        * Work around initial video element creation when you push play (or auto play is triggered)        * since initial video dimensions are reported as 320x240 regardless of content.        */         private function onProgressEvent(event:Event):void {            log("Resizing creative due to " + event.type + " event");           _videoPlayerModule.removeEventListener(MediaEvent.PROGRESS, onResizeEvent);            var timer:Timer = new Timer(100, 1);            timer.addEventListener(TimerEvent.TIMER, sizeAndPositionCurrentCreative);            timer.start();                    }    	  private function log(message:String):void {            trace(message);            message = message.replace("'", "");            ExternalInterface.call("(function() { " +                 "if (window['console'] && console['log']) { console.log('CustomOverlayPlugin: " + message + "')};" +                "})()");        }   	}}