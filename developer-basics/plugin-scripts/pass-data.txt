Custom plugins can be written to accept data that customizes the plugin's behavior. As you will see in this video, it is much like passing data to a function in normal JavaScript.

Here you see a simple custom plugin. The plugin redirects the browser to a new page when the video ends. Note that the page to which the browser redirects is passed as a parameter.

The plugin accepts a parameter in the anonymous function where the plugin is defined. Convention has it the object is named **options**. The properties of the object passed to the plugin can then be used. The **options.redirectURL** property value is used in the redirection.


On the HTML page where the custom plugin is called, we first use standard code to link to the plugin's JavaScript. BTW, there is no CSS needed for this custom plugin.

In the script block where we place code to affect the player, a variable is created. The variable is called **options**, which is a JavaScript object that is passed to the plugin. For this plugin we only define one property, named **redirectURL**, which must match the property name used in the plugin. This object contains only one property, but the options object can have as many properties as the plugin requires.

Now, when calling the custom plugin, named navigateOnVideoEnd, you pass the **options** object.

That's it for the code. Let's test to be sure it works.

We'll browse the HTML page, and when the video ends, the redirect takes us to the page specified in the object's property.

Note that you can pass data to a plugin using Studio. Here you see the configuration screen for the custom plugin we have been using. To pass data, place the options object definition in the **Options(JSON)** form field. Then, when using the player the custom plugin's functionality is part of the player, and you need no other code on the page other than the video tag.
