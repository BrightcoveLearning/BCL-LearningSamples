Custom plugins can be written to accept data that will customize the plugin's behavior. As you will see in this video, it is much like passing data to a function in normal JavaScript.

In the plugin itself you simply accept a parameter in the anonymous function where you define the plugin. The properties of the object passed to the plugin can then be used.

In this simple custom plugin, a URL is passed in, which determines to which page the browser is redirected when the video ends.


On the HTML page where the custom plugin is called we, use standard code to link to the plugin's JavaScript. BTW, there is no CSS needed for this custom plugin.

In the script block that utilizes the getPlayer() method to get a handle on the Brightcove Player, a variable is created. In this case the variable is called **options**, and contains a JavaScript object. For this plugin we only define one property, but the options object can have as many properties as the plugin requires.

Then, when calling the custom plugin, in this case named navigateOnVideoEnd, you pass the options object.

That's it, and lets test the code. We'll browse the HTML page, and when the video ends, the redirect takes us to the page specified in the object's property.

Note that you can pass data to a plugin in Studio. Here you see the configuration screen for a the custom plugin we have been using. To pass data place the options object definition in the **Options(JSON)** form field. Then, when using the player the custom plugins functionality is in the player, and you need no other code on the page.
